import 'dart:io';
import 'package:dart_frog/dart_frog.dart';
import '../db/database.dart';

void main(List<String> args) async {
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
  await Database.initialize();
  print('‚úÖ Database initialized successfully');

  // –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
  final port = int.parse(Platform.environment['PORT'] ?? '8080');

  // –°–æ–∑–¥–∞–µ–º handler —Å CORS middleware
  final handler = const Pipeline()
      .addMiddleware(corsMiddleware)
      .addHandler(_router);

  final server = await serve(handler, 'localhost', port);

  print('üöÄ Server running on http://localhost:${server.port}');
}

// CORS Middleware - —Ç–µ–ø–µ—Ä—å —ç—Ç–æ —Å–∞–º Middleware, –∞ –Ω–µ —Ñ—É–Ω–∫—Ü–∏—è
Middleware get corsMiddleware {
  return (handler) {
    return (context) async {
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ preflight –∑–∞–ø—Ä–æ—Å–æ–≤
      if (context.request.method == HttpMethod.options) {
        return Response(
          headers: {
            'Access-Control-Allow-Origin': 'http://localhost:3000',
            'Access-Control-Allow-Methods': 'GET, POST, PUT, DELETE, OPTIONS',
            'Access-Control-Allow-Headers': 'Content-Type, Authorization',
            'Access-Control-Max-Age': '86400',
          },
        );
      }

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
      final response = await handler(context);

      // –î–æ–±–∞–≤–ª—è–µ–º CORS headers
      return response.copyWith(
        headers: {
          ...response.headers,
          'Access-Control-Allow-Origin': 'http://localhost:3000',
          'Access-Control-Allow-Methods': 'GET, POST, PUT, DELETE, OPTIONS',
          'Access-Control-Allow-Headers': 'Content-Type, Authorization',
        },
      );
    };
  };
}

// –û—Å–Ω–æ–≤–Ω–æ–π router
Future<Response> _router(RequestContext context) async {
  final path = context.request.url.path;

  try {
    if (path == 'api/auth/login' && context.request.method == HttpMethod.post) {
      return _handleLogin(context);
    } else if (path == 'api/auth/register' && context.request.method == HttpMethod.post) {
      return _handleRegister(context);
    } else if (path == 'api/users' && context.request.method == HttpMethod.get) {
      return _handleGetUsers(context);
    } else if (path == 'api/training/plans' && context.request.method == HttpMethod.get) {
      return _handleGetTrainingPlans(context);
    } else if (path == 'api/schedule' && context.request.method == HttpMethod.get) {
      return _handleGetSchedule(context);
    } else {
      return Response.json(
        statusCode: 404,
        body: {'error': 'Endpoint not found: $path'},
      );
    }
  } catch (e) {
    return Response.json(
      statusCode: 500,
      body: {'error': 'Internal server error: $e'},
    );
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ endpoints
Future<Response> _handleLogin(RequestContext context) async {
  // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –∏–∑ routes/api/auth/login.dart
  return Response.json(body: {'message': 'Login endpoint'});
}

Future<Response> _handleRegister(RequestContext context) async {
  // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –∏–∑ routes/api/auth/register.dart
  return Response.json(body: {'message': 'Register endpoint'});
}

Future<Response> _handleGetUsers(RequestContext context) async {
  // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –∏–∑ routes/api/users/index.dart
  return Response.json(body: {'users': []});
}

Future<Response> _handleGetTrainingPlans(RequestContext context) async {
  // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –∏–∑ routes/api/training/plans.dart
  return Response.json(body: {'plans': []});
}

Future<Response> _handleGetSchedule(RequestContext context) async {
  // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –∏–∑ routes/api/schedule/index.dart
  return Response.json(body: {'schedule': []});
}